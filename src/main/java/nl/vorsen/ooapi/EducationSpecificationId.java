/*
 * Open Education API
 * OpenAPI (fka Swagger) specification for the Open Education API.  <figure>  <a target=\"_blank\" href=\"OOAPIv5_model.png\">   <img src=\"OOAPIv5_model.png\" alt=\"OOAPI information model that feeds OOAPI specification\" width=\"70%\" class=\"img-responsive\">   </a>   <figcaption> OOAPI information model that feeds OOAPI specification (click to enlage)</figcaption> </figure>  The model provides an overview of how the objects on which the API is specified are related. The overarching concept educations is not found in the in the end points of the API. The smaller concepts of programOffering, courseOffering and conceptOffering are all found in the offering endpoint. The different types of association can all be found in the association endpoint.  The original file for this model can be found <a target=\"_blank\" href=\"OOAPIv5_model_v0.4.drawio\">here</a>  The program relations object is not found as a separate endpoint but relations between programs can be found within the program endpoint by expanding that endpoint.  Information about earlier meetings and presentations can be found <a target=\"_blank\" href=\"https://github.com/open-education-api/notulen\">here</a>  Information on the EDU-API model that was also used for this api is shown <a target=\"_blank\" href=\"eduapi.png\">here</a>
 *
 * The version of the OpenAPI document: 5.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package nl.vorsen.ooapi;

import java.util.Objects;
import java.util.UUID;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * EducationSpecificationId
 */
@JsonPropertyOrder({
        EducationSpecificationId.JSON_PROPERTY_EDUCATION_SPECIFICATION_ID
})

public class EducationSpecificationId {
    public static final String JSON_PROPERTY_EDUCATION_SPECIFICATION_ID = "educationSpecificationId";
    private UUID educationSpecificationId;

    public EducationSpecificationId() {
    }

    public EducationSpecificationId educationSpecificationId(UUID educationSpecificationId) {

        this.educationSpecificationId = educationSpecificationId;
        return this;
    }

    /**
     * Unique id for this education specification
     * @return educationSpecificationId
     **/
    @NotNull

    @JsonProperty(JSON_PROPERTY_EDUCATION_SPECIFICATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UUID getEducationSpecificationId() {
        return educationSpecificationId;
    }

    @JsonProperty(JSON_PROPERTY_EDUCATION_SPECIFICATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEducationSpecificationId(UUID educationSpecificationId) {
        this.educationSpecificationId = educationSpecificationId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EducationSpecificationId educationSpecificationId = (EducationSpecificationId) o;
        return Objects.equals(this.educationSpecificationId, educationSpecificationId.educationSpecificationId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(educationSpecificationId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EducationSpecificationId {\n");
        sb.append("    educationSpecificationId: ").append(toIndentedString(educationSpecificationId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

