/*
 * Open Education API
 * OpenAPI (fka Swagger) specification for the Open Education API.  <figure>  <a target=\"_blank\" href=\"OOAPIv5_model.png\">   <img src=\"OOAPIv5_model.png\" alt=\"OOAPI information model that feeds OOAPI specification\" width=\"70%\" class=\"img-responsive\">   </a>   <figcaption> OOAPI information model that feeds OOAPI specification (click to enlage)</figcaption> </figure>  The model provides an overview of how the objects on which the API is specified are related. The overarching concept educations is not found in the in the end points of the API. The smaller concepts of programOffering, courseOffering and conceptOffering are all found in the offering endpoint. The different types of association can all be found in the association endpoint.  The original file for this model can be found <a target=\"_blank\" href=\"OOAPIv5_model_v0.4.drawio\">here</a>  The program relations object is not found as a separate endpoint but relations between programs can be found within the program endpoint by expanding that endpoint.  Information about earlier meetings and presentations can be found <a target=\"_blank\" href=\"https://github.com/open-education-api/notulen\">here</a>  Information on the EDU-API model that was also used for this api is shown <a target=\"_blank\" href=\"eduapi.png\">here</a> 
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package nl.vorsen.ooapi;

import java.util.Objects;

import javax.validation.constraints.NotNull;

import io.swagger.annotations.ApiModelProperty;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * IdentifierEntry
 */
@JsonPropertyOrder({
  IdentifierEntry.JSON_PROPERTY_CODE_TYPE,
  IdentifierEntry.JSON_PROPERTY_CODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-04T11:38:05.422668+02:00[Europe/Amsterdam]")
public class IdentifierEntry {
  public static final String JSON_PROPERTY_CODE_TYPE = "codeType";
  private String codeType;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public IdentifierEntry() { 
  }

  public IdentifierEntry codeType(String codeType) {
    
    this.codeType = codeType;
    return this;
  }

   /**
   * The code/identifier type.   This is an *extensible enumeration*. Use &#x60;x-&#x60; to prefix custom values  The predefined values are:   - &#x60;brin&#x60;: The registration number for a Dutch educational institution that is issued by the Dutch Ministry of Education, Culture and Science   - &#x60;crohoCreboCode&#x60;: programs with a CREBO and CROHO number are accredited by the Dutch Ministry of Education, Culture and Science (OCW)   - &#x60;programCode&#x60;: Identifier for the program (collection of courses)   - &#x60;componentCode&#x60;: The code for a component (part of a course)   - &#x60;offeringCode&#x60;: The code to identify a specific offering (program, course or component offering)   - &#x60;organizationId&#x60;: The identifier for the organization   - &#x60;buildingId&#x60;: The number or code to identify a building   - &#x60;bagId&#x60;: The identification of a building as it is known in the Dutch Building Administration (BAG)   - &#x60;roomCode&#x60;: The code for a room   - &#x60;systemId&#x60;: Identifier assigned to an entity in context of a specific system   - &#x60;productId&#x60;: Identifier assigned to a specific product   - &#x60;nationalIdentityNumber&#x60;: Identifier assigned by the governement of the person. e.g. a social security number in the USA   - &#x60;studentNumber&#x60;: Identifier for the student   - &#x60;studielinkNumber&#x60;: Identifier for the person as determined by Studielink   - &#x60;esi&#x60;: European Student Identifier   - &#x60;userName&#x60;: The name of a user   - &#x60;accountId&#x60;: Identifier assigned to a specific account   - &#x60;emailAdress&#x60;: An email address   - &#x60;groupCode&#x60;: The identifier for a group (of persons)   - &#x60;isbn&#x60;: International Standard Book Number that serve as product identifiers for Books   - &#x60;issn&#x60;: International Standard Book Number that serve as product identifiers for periodicals   - &#x60;orcId&#x60;: Open Researcher and Contributor ID   - &#x60;uuid&#x60;: A universally unique identifier   - &#x60;schacHome&#x60;: Home organization using the domain name of the organization   - &#x60;identifier&#x60;: Generic Identifier 
   * @return codeType
  **/
  @NotNull
  @ApiModelProperty(example = "identifier", required = true, value = "The code/identifier type.   This is an *extensible enumeration*. Use `x-` to prefix custom values  The predefined values are:   - `brin`: The registration number for a Dutch educational institution that is issued by the Dutch Ministry of Education, Culture and Science   - `crohoCreboCode`: programs with a CREBO and CROHO number are accredited by the Dutch Ministry of Education, Culture and Science (OCW)   - `programCode`: Identifier for the program (collection of courses)   - `componentCode`: The code for a component (part of a course)   - `offeringCode`: The code to identify a specific offering (program, course or component offering)   - `organizationId`: The identifier for the organization   - `buildingId`: The number or code to identify a building   - `bagId`: The identification of a building as it is known in the Dutch Building Administration (BAG)   - `roomCode`: The code for a room   - `systemId`: Identifier assigned to an entity in context of a specific system   - `productId`: Identifier assigned to a specific product   - `nationalIdentityNumber`: Identifier assigned by the governement of the person. e.g. a social security number in the USA   - `studentNumber`: Identifier for the student   - `studielinkNumber`: Identifier for the person as determined by Studielink   - `esi`: European Student Identifier   - `userName`: The name of a user   - `accountId`: Identifier assigned to a specific account   - `emailAdress`: An email address   - `groupCode`: The identifier for a group (of persons)   - `isbn`: International Standard Book Number that serve as product identifiers for Books   - `issn`: International Standard Book Number that serve as product identifiers for periodicals   - `orcId`: Open Researcher and Contributor ID   - `uuid`: A universally unique identifier   - `schacHome`: Home organization using the domain name of the organization   - `identifier`: Generic Identifier ")
  @JsonProperty(JSON_PROPERTY_CODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCodeType() {
    return codeType;
  }


  @JsonProperty(JSON_PROPERTY_CODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodeType(String codeType) {
    this.codeType = codeType;
  }


  public IdentifierEntry code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Human readable value for the code/identifier
   * @return code
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Human readable value for the code/identifier")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentifierEntry identifierEntry = (IdentifierEntry) o;
    return Objects.equals(this.codeType, identifierEntry.codeType) &&
        Objects.equals(this.code, identifierEntry.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeType, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentifierEntry {\n");
    sb.append("    codeType: ").append(toIndentedString(codeType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

